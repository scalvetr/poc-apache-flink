apiVersion: platform.confluent.io/v1beta1
kind: Connector
metadata:
  name: {{ include "policy-kafka-connect.fullname" . }}-mongodb-connector
  namespace: {{ .Values.kafka_connect.namespace }}
spec:
  name: {{ include "policy-kafka-connect.fullname" . }}-mongodb-connector
  taskMax: 1
  class: com.mongodb.kafka.connect.MongoSourceConnector
  configs:
    key.converter: "org.apache.kafka.connect.storage.StringConverter"
    value.converter: "io.confluent.connect.avro.AvroConverter"
    transforms: "valueToKey, extractKey"
    transforms.valueToKey.type: "org.apache.kafka.connect.transforms.ValueToKey"
    transforms.valueToKey.fields: "code"
    transforms.extractKey.type: "org.apache.kafka.connect.transforms.ExtractField$Key"
    transforms.extractKey.field: "code"
    connection.uri: "mongodb://{{ .Values.mongodb.username }}:{{ .Values.mongodb.password }}@{{ .Values.mongodb.host }}:{{ .Values.mongodb.port }}?authSource={{ .Values.mongodb.authDatabase }}"
    database: "{{ .Values.mongodb.database }}"
    collection: "{{ .Values.mongodb.collection }}"
    publish.full.document.only: "true"
    topic.namespace.map: "{\"{{ .Values.mongodb.database }}.{{ .Values.mongodb.collection }}\":\"{{ .Values.output.topic }}\"}"
    output.format.value: "schema"
    output.schema.value: '{"namespace": "com.github.scalvetr.poc.flink.policy.model","name":
        "Policy","type": "record","fields": [{"name": "policyId","type": "string"},{"name":
        "customerId","type": "string"},{"name": "title","type": "string"},{"name":
        "creationTimestamp","type": "long","logicalType": "timestamp-millis"}]}'
    #output.schema.value: "{{ .Values.output.schema }}"
    value.converter.schema.registry.url: "{{ .Values.kafka.schema_registry_url}}"
    value.converter.schema.registry.basic.auth.user.info: "csp:xxx"
    value.converter.basic.auth.credentials.source: "USER_INFO"
    #basic.auth.user.info: "${file:/mnt/secrets/creds-schemaRegistry-basic/custom.properties:connector-username}"
    value.converter.schemas.enable: "true"
    startup.mode: "copy_existing"
    #errors.tolerance: all

  restartPolicy:
    type: OnFailure
    maxRetry: 10
  connectClusterRef:
    name: connect
    namespace: confluent